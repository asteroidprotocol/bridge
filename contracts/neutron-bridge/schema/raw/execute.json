{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Describes the execute messages available in the contract",
  "oneOf": [
    {
      "description": "Link and enable a CFT-20 token to be bridged",
      "type": "object",
      "required": [
        "link_token"
      ],
      "properties": {
        "link_token": {
          "type": "object",
          "required": [
            "signatures",
            "source_chain_id",
            "token"
          ],
          "properties": {
            "signatures": {
              "description": "The signatures of from the verifying parties",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "source_chain_id": {
              "description": "The chain ID of the source chain",
              "type": "string"
            },
            "token": {
              "description": "The metadata of the CFT-20 token",
              "allOf": [
                {
                  "$ref": "#/definitions/TokenMetadata"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "enable_token"
      ],
      "properties": {
        "enable_token": {
          "type": "object",
          "required": [
            "ticker"
          ],
          "properties": {
            "ticker": {
              "description": "The ticker of the CFT-20 token",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "disable_token"
      ],
      "properties": {
        "disable_token": {
          "type": "object",
          "required": [
            "ticker"
          ],
          "properties": {
            "ticker": {
              "description": "The ticker of the CFT-20 token",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receive CFT-20 token message from the Hub",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "type": "object",
          "required": [
            "amount",
            "destination_addr",
            "signatures",
            "source_chain_id",
            "ticker",
            "transaction_hash"
          ],
          "properties": {
            "amount": {
              "description": "The amount of CFT-20 tokens",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "destination_addr": {
              "description": "The destination address to transfer the CFT-20-equivalent to",
              "type": "string"
            },
            "signatures": {
              "description": "The signatures of from the verifying parties",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "source_chain_id": {
              "description": "The chain ID of the source chain",
              "type": "string"
            },
            "ticker": {
              "description": "The ticker of the CFT-20 token",
              "type": "string"
            },
            "transaction_hash": {
              "description": "The hash of the transaction on the origin chain",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Send CFT-20 token back to the Hub",
      "type": "object",
      "required": [
        "send"
      ],
      "properties": {
        "send": {
          "type": "object",
          "required": [
            "destination_addr"
          ],
          "properties": {
            "destination_addr": {
              "description": "The destination address to transfer the CFT-20-equivalent to",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Retry a failed IBC transaction, the failure IDs can be retrieved using > neutrond query contractmanager failures [contract-address]",
      "type": "object",
      "required": [
        "retry_send"
      ],
      "properties": {
        "retry_send": {
          "type": "object",
          "required": [
            "failure_id"
          ],
          "properties": {
            "failure_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Adds a signer to the allowed list for signature verification",
      "type": "object",
      "required": [
        "add_signer"
      ],
      "properties": {
        "add_signer": {
          "type": "object",
          "required": [
            "name",
            "public_key_base64"
          ],
          "properties": {
            "name": {
              "description": "A simple human name for the owner of the public key",
              "type": "string"
            },
            "public_key_base64": {
              "description": "The public key in base64. This is the raw key without the ASN.1 structure, that is, the last 32 bytes from the DER-encoded public key",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a signer from the allowed list for signature verification",
      "type": "object",
      "required": [
        "remove_signer"
      ],
      "properties": {
        "remove_signer": {
          "type": "object",
          "required": [
            "public_key_base64"
          ],
          "properties": {
            "public_key_base64": {
              "description": "The public key in base64 to remove. This is the same key added using AddSigner",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the contract config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "bridge_chain_id": {
              "description": "The chain ID this bridge is connected to",
              "type": [
                "string",
                "null"
              ]
            },
            "bridge_ibc_channel": {
              "description": "The new IBC channel to the Cosmos Hub to use",
              "type": [
                "string",
                "null"
              ]
            },
            "ibc_timeout_seconds": {
              "description": "The timeout in seconds for IBC packets",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "signer_threshold": {
              "description": "The new threshold of signers needed to confirm a message",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Propose a new owner for the contract",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "description": "Time in seconds for the proposal to expire",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "The owner being proposed",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove the ownership transfer proposal",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim contract ownership",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "TokenMetadata": {
      "type": "object",
      "required": [
        "decimals",
        "image_url",
        "name",
        "ticker"
      ],
      "properties": {
        "decimals": {
          "description": "The amount of decimals this CFT-20 uses",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "image_url": {
          "description": "The URL to the CFT-20 token's image",
          "type": "string"
        },
        "name": {
          "description": "The name of the CFT-20 token",
          "type": "string"
        },
        "ticker": {
          "description": "The ticker of the CFT-20 token",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
